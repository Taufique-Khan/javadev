package com.yadakhov.euler;

/**
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the
 * first 10 terms will be:
 *
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 *
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the
 * even-valued terms.
 *
 * @author yadakhov
 * @since 01/19/06
 */
public class Problem2 {
    public static void main(String[] args) {

        long sum = 0;
        for (int i = 1; i < 4000000; i++) {

            long fib = fib(i);
            if (fib > 4000000) {
                break;  // out of the for loop
            }

            // sum all even terms
            if (fib % 2 == 0) {
                sum += fib;
            }
        }

        System.out.println("The sum is = " + sum);
    }

    /**
     * Get fibonacci sequence with the dynamic programming algorithm
     * instead of recursion
     */
    public static long fib(int n) {
        if (n == 0) return 0;
        long[] F = new long[n+1];
        F[0] = 0;
        F[1] = 1;
        for (int i = 2; i <= n; i++)
            F[i] = F[i-1] + F[i-2];
        return F[n];
    }
}
